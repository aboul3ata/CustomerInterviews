{"ast":null,"code":"var _jsxFileName = \"/Users/aliabouelatta/Dropbox/Cornell/Spring21/bss/p/interviews/frontend/src/Landing/Sign.js\";\n// // Import FirebaseAuth and firebase.\n// import React from 'react';\nimport React from 'react';\nimport StyledFirebaseAuth from 'react-firebaseui/StyledFirebaseAuth';\nimport firebase from 'firebase';\nimport Dashboard from '../Dashboard/Dashboard'; // Configure Firebase.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar config = {\n  apiKey: \"AIzaSyAJmTMuuAhFREEI8THl2f3SDAOewLjeozU\",\n  authDomain: \"interviews-4b797.firebaseapp.com\",\n  projectId: \"interviews-4b797\",\n  storageBucket: \"interviews-4b797.appspot.com\",\n  messagingSenderId: \"114506550373\",\n  appId: \"1:114506550373:web:cce92fc58d26ea99124a8c\"\n};\nfirebase.initializeApp(config);\n\nclass SignInScreen extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      isSignedIn: false // Local signed-in state.\n\n    };\n    this.uiConfig = {\n      // Popup signin flow rather than redirect flow.\n      signInFlow: 'popup',\n      // We will display Google and Facebook as auth providers.\n      signInOptions: [firebase.auth.EmailAuthProvider.PROVIDER_ID],\n      callbacks: {\n        // Avoid redirects after sign-in.\n        signInSuccessWithAuthResult: () => false\n      }\n    };\n  }\n\n  // Listen to the Firebase Auth state and set the local state.\n  componentDidMount() {\n    this.unregisterAuthObserver = firebase.auth().onAuthStateChanged(user => this.setState({\n      isSignedIn: !!user\n    }));\n  } // Make sure we un-register Firebase observers when the component unmounts.\n\n\n  componentWillUnmount() {\n    this.unregisterAuthObserver();\n  }\n\n  render() {\n    if (!this.state.isSignedIn) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(StyledFirebaseAuth, {\n          uiConfig: this.uiConfig,\n          firebaseAuth: firebase.auth()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default SignInScreen;","map":{"version":3,"sources":["/Users/aliabouelatta/Dropbox/Cornell/Spring21/bss/p/interviews/frontend/src/Landing/Sign.js"],"names":["React","StyledFirebaseAuth","firebase","Dashboard","config","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","initializeApp","SignInScreen","Component","state","isSignedIn","uiConfig","signInFlow","signInOptions","auth","EmailAuthProvider","PROVIDER_ID","callbacks","signInSuccessWithAuthResult","componentDidMount","unregisterAuthObserver","onAuthStateChanged","user","setState","componentWillUnmount","render"],"mappings":";AAAA;AACA;AAEA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,kBAAP,MAA+B,qCAA/B;AACA,OAAOC,QAAP,MAAqB,UAArB;AACA,OAAOC,SAAP,MAAsB,wBAAtB,C,CAEA;;;AACA,IAAIC,MAAM,GAAG;AACTC,EAAAA,MAAM,EAAE,yCADC;AAETC,EAAAA,UAAU,EAAE,kCAFH;AAGTC,EAAAA,SAAS,EAAE,kBAHF;AAITC,EAAAA,aAAa,EAAE,8BAJN;AAKTC,EAAAA,iBAAiB,EAAE,cALV;AAMTC,EAAAA,KAAK,EAAE;AANE,CAAb;AASAR,QAAQ,CAACS,aAAT,CAAuBP,MAAvB;;AAEA,MAAMQ,YAAN,SAA2BZ,KAAK,CAACa,SAAjC,CAA2C;AAAA;AAAA;AAAA,SAGzCC,KAHyC,GAGjC;AACNC,MAAAA,UAAU,EAAE,KADN,CACY;;AADZ,KAHiC;AAAA,SAQzCC,QARyC,GAQ9B;AACT;AACAC,MAAAA,UAAU,EAAE,OAFH;AAGT;AACAC,MAAAA,aAAa,EAAE,CACXhB,QAAQ,CAACiB,IAAT,CAAcC,iBAAd,CAAgCC,WADrB,CAJN;AAOTC,MAAAA,SAAS,EAAE;AACT;AACAC,QAAAA,2BAA2B,EAAE,MAAM;AAF1B;AAPF,KAR8B;AAAA;;AAqBzC;AACAC,EAAAA,iBAAiB,GAAG;AAClB,SAAKC,sBAAL,GAA8BvB,QAAQ,CAACiB,IAAT,GAAgBO,kBAAhB,CACzBC,IAAD,IAAU,KAAKC,QAAL,CAAc;AAACb,MAAAA,UAAU,EAAE,CAAC,CAACY;AAAf,KAAd,CADgB,CAA9B;AAGD,GA1BwC,CA4BzC;;;AACAE,EAAAA,oBAAoB,GAAG;AACrB,SAAKJ,sBAAL;AACD;;AAEDK,EAAAA,MAAM,GAAG;AACP,QAAI,CAAC,KAAKhB,KAAL,CAAWC,UAAhB,EAA4B;AAC1B,0BACE;AAAA,+BACE,QAAC,kBAAD;AAAoB,UAAA,QAAQ,EAAE,KAAKC,QAAnC;AAA6C,UAAA,YAAY,EAAEd,QAAQ,CAACiB,IAAT;AAA3D;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cADF;AAKD;;AACD,wBAEE;AAAA;AAAA;AAAA;AAAA,YAFF;AASD;;AAlDwC;;AAoD3C,eAAeP,YAAf","sourcesContent":["// // Import FirebaseAuth and firebase.\n// import React from 'react';\n\nimport React from 'react';\nimport StyledFirebaseAuth from 'react-firebaseui/StyledFirebaseAuth';\nimport firebase from 'firebase';\nimport Dashboard from '../Dashboard/Dashboard'\n \n// Configure Firebase.\nvar config = {\n    apiKey: \"AIzaSyAJmTMuuAhFREEI8THl2f3SDAOewLjeozU\",\n    authDomain: \"interviews-4b797.firebaseapp.com\",\n    projectId: \"interviews-4b797\",\n    storageBucket: \"interviews-4b797.appspot.com\",\n    messagingSenderId: \"114506550373\",\n    appId: \"1:114506550373:web:cce92fc58d26ea99124a8c\"\n  };\n\nfirebase.initializeApp(config);\n \nclass SignInScreen extends React.Component {\n \n  // The component's Local state.\n  state = {\n    isSignedIn: false // Local signed-in state.\n  };\n \n  // Configure FirebaseUI.\n  uiConfig = {\n    // Popup signin flow rather than redirect flow.\n    signInFlow: 'popup',\n    // We will display Google and Facebook as auth providers.\n    signInOptions: [\n        firebase.auth.EmailAuthProvider.PROVIDER_ID\n    ],\n    callbacks: {\n      // Avoid redirects after sign-in.\n      signInSuccessWithAuthResult: () => false\n    }\n  };\n \n  // Listen to the Firebase Auth state and set the local state.\n  componentDidMount() {\n    this.unregisterAuthObserver = firebase.auth().onAuthStateChanged(\n        (user) => this.setState({isSignedIn: !!user})\n    );\n  }\n  \n  // Make sure we un-register Firebase observers when the component unmounts.\n  componentWillUnmount() {\n    this.unregisterAuthObserver();\n  }\n \n  render() {\n    if (!this.state.isSignedIn) {\n      return (\n        <div>\n          <StyledFirebaseAuth uiConfig={this.uiConfig} firebaseAuth={firebase.auth()}/>\n        </div>\n      );\n    }\n    return (\n\n      <div>\n        {/* <h1>My App</h1>\n        <p>Welcome {firebase.auth().currentUser.displayName}! You are now signed-in!</p>\n        <a onClick={() => firebase.auth().signOut()}>Sign-out</a> */}\n        \n      </div>\n    );\n  }\n}\nexport default SignInScreen;"]},"metadata":{},"sourceType":"module"}